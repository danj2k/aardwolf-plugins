<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>

<!-- Plugin "Danj_DMAssist" written by Danj 2023-02-26 -->

<muclient>
    <plugin name="Danj_DMAssist" author="Danj" id="d53d2885c2414f3485797d20" language="Lua" purpose="Intelligently casts curse and dispel magic on a target, keeping track of status" save_state="y" date_written="2023-02-26" requires="4.90" version="1.02">

    </plugin>

    <!--  Script  -->
    <script>
        <![CDATA[
require "aardwolf_colors"
require "wrapped_captures"
require "gmcphelper"

-- Intelligently cast curse and dispel magic/dampening field, keeping track of success and failures and character status
function Dm(target)
    local myState, myClasses, dispel_command

    target = target or ""

    -- Global variables
    Curse_Fail = Curse_Fail or false
    Curse_Success = Curse_Success or false
    Dispel_Fail = Dispel_Fail or false
    Dispel_NA = Dispel_NA or false

    myState = tonumber(gmcp("char.status.state"))                   -- check if we are fighting
    if myState ~= 8 then
        Curse_Fail = false                                          -- reset curse and dispel status
        Curse_Success = false
        Dispel_Fail = false
        Dispel_NA = false
        if target == "" then                             -- if we are not fighting, user must specify target
            ColourNote("orange", "", "dmassist: not fighting and no target selected")
            DeleteTrigger("curse_lost_conc")                            -- delete temporary triggers
            DeleteTrigger("curse_already_cursed")
            DeleteTrigger("curse_fail")
            DeleteTrigger("curse_succed")
            DeleteTrigger("dispel_no_dispellable")
            DeleteTrigger("dispel_no_spells")
            DeleteTrigger("dispel_unaffected")
            DeleteTrigger("dispel_fail")
            DeleteTrigger("dispel_succeed")
            DeleteTrigger("dispel_lost_conc")
            DeleteTrigger("dampening_lost_conc")
            DeleteTrigger("dampening_unaffected")
            return
        end
    end

    -- Temporary triggers
    if IsTrigger("curse_lost_conc") ~= 0 then
        check(AddTrigger(
            "curse_lost_conc",
            "(?:^You lost your concentration while trying to cast curse.$)",
            "require \"aardwolf_colors\"\nCurse_Fail = true\nCurse_Success = false\nColourNote(\"orange\", \"\", \"dmassist: Lost concentration while trying to cast curse.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "curse_lost_conc",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("curse_already_cursed") ~= 0 then
        check(AddTrigger(
            "curse_already_cursed",
            "(?:^.* is already cursed.$)",
            "require \"aardwolf_colors\"\nCurse_Success = true\nCurse_Fail = false\nColourNote(\"orange\", \"\", \"dmassist: Enemy is already cursed!\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "curse_already_cursed",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("curse_fail") ~= 0 then
        check(AddTrigger(
            "curse_fail",
            "(?:^You fail to curse .*$)",
            "require \"aardwolf_colors\"\nCurse_Fail = true\nCurse_Success = false\nColourNote(\"orange\", \"\", \"dmassist: Failed to curse enemy.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "curse_fail",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("curse_succeed") ~= 0 then
        check(AddTrigger(
            "curse_succeed",
            "(?:^.* looks very uncomfortable.$)",
            "require \"aardwolf_colors\"\nCurse_Success = true\nCurse_Fail = false\nColourNote(\"orange\", \"\", \"dmassist: Curse succeeded!\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "curse_succeed",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("dispel_lost_conc") ~= 0 then
        check(AddTrigger(
            "dispel_lost_conc",
            "(?:^You lost your concentration while trying to cast dispel magic.$)",
            "require \"aardwolf_colors\"\nDispel_Fail = true\nColourNote(\"orange\",\"\",\"dmassist: Lost concentration while trying to cast dispel magic.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "dispel_lost_conc",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("dampening_lost_conc") ~= 0 then
        check(AddTrigger(
            "dampening_lost_conc",
            "(?:^You lost your concentration while trying to cast dampening field.$)",
            "require \"aardwolf_colors\"\nDispel_Fail = true\nColourNote(\"orange\",\"\",\"dmassist: Lost concentration while trying to cast dampening field.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "dampening_lost_conc",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("dispel_no_dispellable") ~= 0 then
        check(AddTrigger(
            "dispel_no_dispellable",
            "(?:^No dispellable spells found.$)",
            "require \"aardwolf_colors\"\nDispel_NA = true\nColourNote(\"orange\",\"\",\"dmassist: Nothing to dispel.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "dispel_no_dispellable",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("dispel_no_spells") ~= 0 then
        check(AddTrigger(
            "dispel_no_spells",
            "(?:^.* has no spells to dispel.$)",
            "require \"aardwolf_colors\"\nDispel_NA = true\nColourNote(\"orange\",\"\",\"dmassist: Nothing to dispel.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "dispel_no_spells",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("dispel_unaffected") ~= 0 then
        check(AddTrigger(
            "dispel_unaffected",
            "(?:^.* is unaffected by your dispel magic.$)",
            "require \"aardwolf_colors\"\nDispel_NA = true\nColourNote(\"orange\",\"\",\"dmassist: Target can't be dispelled.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "dispel_unaffected",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("dampening_unaffected") ~= 0 then
        check(AddTrigger(
            "dampening_unaffected",
            "(?:^.* is unaffected by your dampening field.$)",
            "require \"aardwolf_colors\"\nDispel_NA = true\nColourNote(\"orange\",\"\",\"dmassist: Target can't be dispelled.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "dampening_unaffected",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("dispel_fail") ~= 0 then
        check(AddTrigger(
            "dispel_fail",
            "(?:^You failed.$)",
            "require \"aardwolf_colors\"\nDispel_Fail = true\nColourNote(\"orange\",\"\",\"dmassist: Dispel magic attempt failed.\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "dispel_fail",
            "send_to",
            sendto.script
        )
    end
    if IsTrigger("dispel_succeed") ~= 0 then
        check(AddTrigger(
            "dispel_succeed",
            "(?:^You dispelled \\d+ spells? on .*$)",
            "require \"aardwolf_colors\"\nDispel_Fail = false\nColourNote(\"orange\",\"\",\"dmassist: Dispel magic succeeded!\")",
            trigger_flag.Enabled + trigger_flag.RegularExpression,
            custom_colour.NoChange,
            0,
            "",
            ""
        ))
        SetTriggerOption(
            "dispel_succeed",
            "send_to",
            sendto.script
        )
    end

    -- do we need to curse?
    if not Curse_Success then
        Send("c curse " .. target)
    end
    myClasses = gmcp("char.base.classes") -- check our classes to see if we want to cast dispel magic or dampening field
    if string.find(myClasses, "6") then
        dispel_command = "c 'dampening field'"  -- we have psi class so we should use dampening field
    else
        dispel_command = "c 'dispel magic'"
    end
    -- do we need to dispel magic/dampening field?
    if not Dispel_NA then
        Send(dispel_command .. " " .. target)
    end

    -- if we didn't do either, let the user know
    if Curse_Success and Dispel_NA then
        ColourNote("orange","","dmassist: No curse/dispel magic action needed/applicable for this enemy!")
    end
end

-- This function prints a help message.
function Dm_help()
    ColourNote("orange", "", "Dispel Magic assistant help")
    ColourNote("orange", "", "===========================")
    ColourNote("orange", "", "dm                -- Intelligently cast curse and dispel magic (or dampening field) on your current target.")
    ColourNote("orange", "", "dm <target>       -- Intelligently cast curse and dispel magic (or dampening field) on a named target.")
end

-- On plugin install, display help information and set up aliases.
function OnPluginInstall()
    Dm_help()
    AddAlias(
        "dm_alias_notarget",
        "dm",
        "Dm()",
        alias_flag.Enabled,
        ""
    )
    SetAliasOption(
        "dm_alias_notarget",
        "send_to",
        sendto.script
    )
    AddAlias(
        "dm_alias",
        "dm *",
        "Dm(\"%1\")",
        alias_flag.Enabled,
        ""
    )
    SetAliasOption(
        "dm_alias",
        "send_to",
        sendto.script
    )
    Prev_State = 0
end

-- On plugin disable, remove aliases and triggers
function OnPluginDisable()
    DeleteAlias("dm_alias_notarget")
    DeleteAlias("dm_alias")
    DeleteTrigger("curse_lost_conc")                            -- delete temporary triggers
    DeleteTrigger("curse_already_cursed")
    DeleteTrigger("curse_fail")
    DeleteTrigger("curse_succed")
    DeleteTrigger("dispel_no_dispellable")
    DeleteTrigger("dispel_no_spells")
    DeleteTrigger("dispel_unaffected")
    DeleteTrigger("dispel_fail")
    DeleteTrigger("dispel_succeed")
    DeleteTrigger("dispel_lost_conc")
    DeleteTrigger("dampening_lost_conc")
    DeleteTrigger("dampening_unaffected")
end

function OnPluginClose()
    OnPluginDisable()
end

-- Receive GMCP broadcasts
function OnPluginBroadcast(msg, id, name, text)
    local myState

    if id == "3e7dedbe37e44942dd46d264" then                                -- message from the GMCP Handler
        if text == "char.status" then                                       -- the GMCP Handler plugin says "I got a new char.status!"
            myState = tonumber(gmcp("char.status.state"))
            if myState == 8 and myState ~= Prev_State then                  -- fighting a new enemy
                ColourNote("orange", "", "dmassist: Status change detected, fighting new enemy.")
                Curse_Fail = false                                          -- reset curse and dispel status
                Curse_Success = false
                Dispel_Fail = false
                Dispel_NA = false
            end
            if myState ~= Prev_State then
                Prev_State = myState
            end
        end
    end
end
        ]]>
    </script>
</muclient>